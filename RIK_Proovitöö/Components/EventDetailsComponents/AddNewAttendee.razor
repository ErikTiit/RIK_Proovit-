@using Microsoft.AspNetCore.Components.Forms
@using RIK_Proovitöö.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager

@if (attendeeType == "Individual")
{
    <EditForm Model="newIndividual" OnValidSubmit="HandleValidSubmitIndividual">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <InputText id="firstName" @bind-Value="newIndividual.FirstName" placeholder="Eesnimi" />
        <InputText id="lastName" @bind-Value="newIndividual.LastName" placeholder="Perenimi" />
        <InputNumber id="personalCode" @bind-Value="newIndividual.PersonalCode" placeholder="Isikukood" />
        <InputSelect id="paymentType" @bind-Value="newIndividual.PaymentType">
            <option value="">Makseviis</option>
            @foreach (var paymentType in Enum.GetValues<PaymentType>())
            {
                <option value="@paymentType">@paymentType</option>
            }
        </InputSelect>
        <InputTextArea id="extraInfo" @bind-Value="newIndividual.ExtraInfo" placeholder="Lisainfo" />

        <button type="button" @onclick="HandleReturn">Return</button>
        <button type="submit">Salvesta</button>
    </EditForm>
}
else if (attendeeType == "Company")
{
    <EditForm Model="newCompany" OnValidSubmit="HandleValidSubmitCompany">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <InputText id="CompanyName" @bind-Value="newCompany.CompanyName" placeholder="Ettevõtte nimi" />
        <InputNumber id="RegistryCode" @bind-Value="newCompany.RegistryCode" placeholder="Registrikood" />
        <InputSelect id="paymentType" @bind-Value="newCompany.PaymentType">
            <option value="">Makseviis</option>
            @foreach (var paymentType in Enum.GetValues<PaymentType>())
            {
                <option value="@paymentType">@paymentType</option>
            }
        </InputSelect>
        <InputTextArea id="extraInfo" @bind-Value="newCompany.ExtraInfo" placeholder="Lisainfo" />

        <button type="button" @onclick="HandleReturn">Return</button>
        <button type="submit">Salvesta</button>
    </EditForm>
}

<InputRadioGroup @bind-Value="attendeeType">
    <InputRadio id="individual" Value="@("Individual")" />Eraisik
    <InputRadio id="company" Value="@("Company")" />Ettevõte
</InputRadioGroup>

@code {
    private Individual newIndividual = new Individual();
    private Company newCompany = new Company();
    private string attendeeType = "Individual";

    [Parameter]
    public Event EventDetails { get; set; }

    [Parameter]
    public EventCallback OnAttendeeAdded { get; set; }

    private async Task HandleValidSubmitIndividual()
    {
        var createdIndividual = await Http.PostAsJsonAsync("/api/Individual", newIndividual);
        if (createdIndividual.IsSuccessStatusCode)
        {
            var individual = await createdIndividual.Content.ReadFromJsonAsync<Individual>();
            if (EventDetails != null && individual != null)
            {
                
                var eventIndividual = new EventIndividual { EventID = EventDetails.ID, IndividualID = individual.ID };
                var createdEventIndividual = await Http.PostAsJsonAsync("/api/EventIndividual", eventIndividual);
                if (createdEventIndividual.IsSuccessStatusCode)
                {
                    await OnAttendeeAdded.InvokeAsync(null);
                }
            }
        }
    }

    private async Task HandleValidSubmitCompany()
    {
        var createdCompany = await Http.PostAsJsonAsync("/api/Company", newCompany);
        if (createdCompany.IsSuccessStatusCode)
        {
            var company = await createdCompany.Content.ReadFromJsonAsync<Company>();
            if (EventDetails != null && company != null)
            {
                
                var eventCompany = new EventCompany { EventID = EventDetails.ID, CompanyID = company.ID };
                var createdEventCompany = await Http.PostAsJsonAsync("/api/EventCompany", eventCompany);
                if (createdEventCompany.IsSuccessStatusCode)
                {
                    await OnAttendeeAdded.InvokeAsync(null);
                }
            }
        }
    }

    private void HandleReturn()
    {
        NavigationManager.NavigateTo("/");
    }

}
