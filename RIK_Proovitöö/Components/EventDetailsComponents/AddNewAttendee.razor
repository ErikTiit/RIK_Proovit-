@using Microsoft.AspNetCore.Components.Forms
@using RIK_Proovitöö.Models
@using RIK_Proovitöö.Services
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IEventService EventService

<div class="justify-content-center">
    <div class="container">
        <InputRadioGroup @bind-Value="attendeeType" class="justify-content-center row">
            <div class="mb-3 col">
                <InputRadio id="individual" Value="@("Individual")" />Eraisik
            </div>
            <div class="mb-3 col">
                <InputRadio id="company" Value="@("Company")" />Ettevõte
            </div>
        </InputRadioGroup>
            </div>

                @if (attendeeType == "Individual")
                {
                <div class="container mt-5">
                    <div class="row justify-content-center">
                        <div class="col-12 col-md-8 col-lg-6">
                            <EditForm Model="newIndividual" OnValidSubmit="HandleValidSubmitIndividual">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="form-group row mb-3">
                                    <label for="firstName" class="col-sm-4 col-form-label">Eesnimi:</label>
                                    <div class="col-sm-8">
                                        <InputText class="form-control border" id="firstName" @bind-Value="newIndividual.FirstName" />
                                    </div>
                                </div>
                                <div class="form-group row mb-3">
                                    <label for="lastName" class="col-sm-4 col-form-label">Perenimi:</label>
                                    <div class="col-sm-8">
                                        <InputText class="form-control border" id="lastName" @bind-Value="newIndividual.LastName" />
                                    </div>
                                </div>
                                <div class="form-group row mb-3">
                                    <label for="personalCode" class="col-sm-4 col-form-label">Isikukood:</label>
                                    <div class="col-sm-8">
                                <InputNumber class="form-control border" maxlength="11" id="personalCode" @bind-Value="newIndividual.PersonalCode" />
                                    </div>
                                </div>
                                <div class="form-group row mb-3">
                                    <label for="paymentType" class="col-sm-4 col-form-label">Makseviis:</label>
                                    <div class="col-sm-8">
                                        <InputSelect class="form-control border" id="paymentType" @bind-Value="newIndividual.PaymentType">
                                                @foreach (var paymentType in Enum.GetValues<PaymentType>())
                                                {
                                                <option value="@paymentType">@paymentType</option>
                                                }
                                        </InputSelect>
                                    </div>
                                </div>
                                <div class="form-group row mb-3">
                                    <label for="extraInfo" class="col-sm-4 col-form-label">Lisainfo:</label>
                                    <div class="col-sm-8">
                                        <InputTextArea class="form-control border" id="extraInfo" @bind-Value="newIndividual.ExtraInfo" rows="3" />
                                    </div>
                                </div>

                                <button type="button" class="btn btn-secondary" @onclick="HandleReturn">Tagasi</button>
                                <button type="submit" class="btn btn-primary">Salvesta</button>
                            </EditForm>
                        </div>
                    </div>
                </div>
                }
                else if (attendeeType == "Company")
                {
                <div class="container mt-5">
                    <div class="row justify-content-center">
                        <div class="col-12 col-md-8 col-lg-6">
                            <EditForm Model="newCompany" OnValidSubmit="HandleValidSubmitCompany">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="form-group row mb-3">
                                    <label for="CompanyName" class="col-sm-4 col-form-label">Ettevõtte nimi:</label>
                                    <div class="col-sm-8">
                                        <InputText class="form-control border" id="CompanyName" @bind-Value="newCompany.CompanyName" />
                                    </div>
                                </div>
                                <div class="form-group row mb-3">
                                    <label for="RegistryCode" class="col-sm-4 col-form-label">Registrikood:</label>
                                    <div class="col-sm-8">
                                <InputNumber class="form-control border" maxlength="11" id="RegistryCode" @bind-Value="newCompany.RegistryCode" />
                                    </div>
                                </div>
                                <div class="form-group row mb-3">
                                    <label for="paymentType" class="col-sm-4 col-form-label">Makseviis:</label>
                                    <div class="col-sm-8">
                                        <InputSelect class="form-control border" id="paymentType" @bind-Value="newCompany.PaymentType">
                                                @foreach (var paymentType in Enum.GetValues<PaymentType>())
                                                {
                                                <option value="@paymentType">@paymentType</option>
                                                }
                                        </InputSelect>
                                    </div>
                                </div>
                                <div class="form-group row mb-3">
                                    <label for="extraInfo" class="col-sm-4 col-form-label">Lisainfo:</label>
                                    <div class="col-sm-8">
                                        <InputTextArea class="form-control border" id="extraInfo" @bind-Value="newCompany.ExtraInfo" rows="3" />
                                    </div>
                                </div>

                                <button type="button" class="btn btn-secondary" @onclick="HandleReturn">Tagasi</button>
                                <button type="submit" class="btn btn-primary">Salvesta</button>
                            </EditForm>
                        </div>
                    </div>
                </div>
                }
        </div>


@code {
    private Individual newIndividual = new Individual();
    private Company newCompany = new Company();
    private string attendeeType = "Individual";

    [Parameter]
    public Event EventDetails { get; set; }

    [Parameter]
    public EventCallback OnAttendeeAdded { get; set; }

    private async Task HandleValidSubmitIndividual()
    {
        var createdIndividual = await EventService.CreateIndividualAsync(newIndividual);
        if (createdIndividual.IsSuccessStatusCode)
        {
            var individual = await createdIndividual.Content.ReadFromJsonAsync<Individual>();
            if (EventDetails != null && individual != null)
            {
                var eventIndividual = new EventIndividual { EventID = EventDetails.ID, IndividualID = individual.ID };
                var createdEventIndividual = await EventService.CreateEventIndividualAsync(eventIndividual);
                if (createdEventIndividual.IsSuccessStatusCode)
                {
                    await OnAttendeeAdded.InvokeAsync(null);
                }
            }
        }
    }

    private async Task HandleValidSubmitCompany()
    {
        var createdCompany = await EventService.CreateCompanyAsync(newCompany);
        if (createdCompany.IsSuccessStatusCode)
        {
            var company = await createdCompany.Content.ReadFromJsonAsync<Company>();
            if (EventDetails != null && company != null)
            {
                var eventCompany = new EventCompany { EventID = EventDetails.ID, CompanyID = company.ID };
                var createdEventCompany = await EventService.CreateEventCompanyAsync(eventCompany);
                if (createdEventCompany.IsSuccessStatusCode)
                {
                    await OnAttendeeAdded.InvokeAsync(null);
                }
            }
        }
    }


    private void HandleReturn()
    {
        NavigationManager.NavigateTo("/");
    }

}
