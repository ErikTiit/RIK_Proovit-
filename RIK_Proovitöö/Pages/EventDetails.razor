@page "/eventdetails/{id}"
@using Microsoft.AspNetCore.Components.Forms
@using System.Net
@using RIK_Proovitöö.Models
@using RIK_Proovitöö.Components.EventDetailsComponents
@using RIK_Proovitöö.Services
@inject NavigationManager NavigationManager
@inject IEventService EventService
@inject IConfiguration Configuration


<h3>Event Details</h3>

@if (eventDetails == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <p>@message</p>
        <h4>@eventDetails.Name</h4>
        <p>Date: @eventDetails.Date.ToString("dd.MM.yyyy")</p>
        <p>Location: @eventDetails.Location</p>
        <h5>Attendees:</h5>
        <ol>
            @if (eventIndividuals != null)
            {
                foreach (var attendee in eventIndividuals)
                {
                    if (attendee.Individual != null)
                    {
                        <li>
                            @attendee.Individual.FirstName @attendee.Individual.LastName (@attendee.Individual.PersonalCode)
                            <button onclick="@(async () => await DeleteIndividualAttendee(attendee))">Delete</button>
                            <button onclick="@(async () => GoToDetails(attendee))">Details</button>
                        </li>
                    }
                }
            }

            @if (eventCompanies != null)
            {
                foreach (var attendee in eventCompanies)
                {
                    if (attendee.Company != null)
                    {
                        <li>
                            @attendee.Company.CompanyName ( @attendee.Company.RegistryCode)
                            <button onclick="@(async () => await DeleteCompanyAttendee(attendee))">Delete</button>
                            <button onclick="@(async () => GoToDetails(attendee))">Details</button>
                        </li>
                    }
                }
            }
        </ol>




    </div>
    <h3>Add New Attendee</h3>
    <AddNewAttendee EventDetails="eventDetails" OnAttendeeAdded="RefreshPage" />
}

@code {
    [Parameter]
    public string id { get; set; } = string.Empty;

    private Event? eventDetails;
    private List<EventIndividual>? eventIndividuals;
    private List<EventCompany>? eventCompanies;

    protected override async Task OnInitializedAsync()
    {
        if (int.TryParse(id, out var eventId))
        {
            try
            {
                eventDetails = await EventService.GetEventAsync(eventId);  
                eventIndividuals = await EventService.GetEventIndividualsAsync(eventId); 
                eventCompanies = await EventService.GetEventCompaniesAsync(eventId);  

                foreach (var attendee in eventIndividuals)
                {
                    var individual = await EventService.GetIndividualAsync(attendee.IndividualID);  
                    if (individual != null)
                    {
                        attendee.Individual = individual;
                    }
                }

                foreach (var attendee in eventCompanies)
                {
                    var company = await EventService.GetCompanyAsync(attendee.CompanyID);  
                    if (company != null)
                    {
                        attendee.Company = company;
                    }
                }
            }
            catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
            {
                Console.WriteLine($"Event with ID {eventId} not found.");
            }
        }
    }
    private string message;

    private async Task DeleteIndividualAttendee(EventIndividual attendee)
    {

        await EventService.DeleteIndividualAttendeeAsync(attendee.EventID, attendee.IndividualID); 

        eventIndividuals.Remove(attendee);
        message = "The individual attendee was successfully deleted.";

        StateHasChanged();
    }

    private async Task DeleteCompanyAttendee(EventCompany attendee)
    {
        
        await EventService.DeleteCompanyAttendeeAsync(attendee.EventID, attendee.CompanyID); 

        eventCompanies.Remove(attendee);
        message = "The company attendee was successfully deleted.";

        StateHasChanged();
    }




    private async Task RefreshPage()
    {
        await OnInitializedAsync();
    }

    private void GoToDetails(EventIndividual attendee)
    {
        NavigationManager.NavigateTo($"{Configuration["Urls:IndividualDetails"]}/{attendee.IndividualID}");
    }

    private void GoToDetails(EventCompany attendee)
    {
        NavigationManager.NavigateTo($"{Configuration["Urls:CompanyDetails"]}/{attendee.CompanyID}");
    }

}
