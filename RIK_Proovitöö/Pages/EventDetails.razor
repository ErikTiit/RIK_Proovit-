@page "/eventdetails/{id}"
@using Microsoft.AspNetCore.Components.Forms
@using System.Net
@using RIK_Proovitöö.Models
@using RIK_Proovitöö.Components.EventDetailsComponents
@using RIK_Proovitöö.Services
@using RIK_Proovitöö.Components.DetailsBanner
@inject NavigationManager NavigationManager
@inject IEventService EventService
@inject IConfiguration Configuration


<Banner/>

@if (eventDetails == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-12 col-md-8 col-lg-6">
                <h4 style="color:deepskyblue">Osavõtjad</h4>
                <div class="form-group row mb-3 mt-5">
                    <label for="date" class="col-sm-4 col-form-label">Ürituse nimi:</label>
                    <div class="col-sm-8">
                        <p  id="Name">@eventDetails.Name</p>
                    </div>
                </div>
                <div class="form-group row mb-3">
                    <label for="date" class="col-sm-4 col-form-label">Toimumiseaeg:</label>
                    <div class="col-sm-8">
                        <p id="date">@eventDetails.Date.ToString("dd.MM.yyyy")</p>
                    </div>
                </div>
                <div class="form-group row mb-3">
                    <label for="location" class="col-sm-4 col-form-label">Koht:</label>
                    <div class="col-sm-8">
                        <p id="location">@eventDetails.Location</p>
                    </div>
                </div>
                <h5 class="mt-3">Osavõtjad:</h5>
                <ol>
                    @if (eventIndividuals != null)
                    {
                        foreach (var attendee in eventIndividuals)
                        {
                            if (attendee.Individual != null)
                            {
                                <li>
                                    <div class="form-group row mb-3">
                                        <div class="col-4 text-start">@attendee.Individual.FirstName @attendee.Individual.LastName</div>
                                        <div class="col-4 text-center">@attendee.Individual.PersonalCode</div>
                                        <div class="col-4 text-end">
                                            <a href="IndividualDetails/@attendee.IndividualID" style="color: inherit; text-decoration: none;" class="pr-3 btn btn-link btn-sm text-secondary">VAATA</a>
                                            <button class="btn  btn-sm text-secondary" @onclick="@(async () => await DeleteIndividualAttendee(attendee))">KUSTUTA</button>
                                        </div>
                                    </div>
                                </li>
                            }
                        }
                    }

                    @if (eventCompanies != null)
                    {
                        foreach (var attendee in eventCompanies)
                        {
                            if (attendee.Company != null)
                            {
                                <li>
                                    <div class="form-group row mb-3">
                                        <div class="col-4 text-start">@attendee.Company.CompanyName</div>
                                        <div class="col-4 text-center">@attendee.Company.RegistryCode</div>
                                        <div class="col-4 text-end">
                                            <a href="CompanyDetails/@attendee.CompanyID" style="color: inherit; text-decoration: none;" class="pr-3 btn btn-link btn-sm text-secondary">VAATA</a>
                                            <button class="btn  btn-sm text-secondary" @onclick="@(async () => await DeleteCompanyAttendee(attendee))">KUSTUTA</button>
                                        </div>
                                    </div>
                                </li>
                            }
                        }
                    }


                </ol>
                
            </div>
        </div>
    </div>
}

<div class="d-flex justify-content-center align-items-center">
    <div class="container text-center">
        <h3 style="color:deepskyblue">Osavõtja lisamine </h3>
        <AddNewAttendee EventDetails="eventDetails" OnAttendeeAdded="RefreshPage" />
    </div>
</div>

}

@code {
    [Parameter]
    public string id { get; set; } = string.Empty;

    private Event? eventDetails;
    private List<EventIndividual>? eventIndividuals;
    private List<EventCompany>? eventCompanies;

    protected override async Task OnInitializedAsync()
    {
        if (int.TryParse(id, out var eventId))
        {
            try
            {
                eventDetails = await EventService.GetEventAsync(eventId);  
                eventIndividuals = await EventService.GetEventIndividualsAsync(eventId); 
                eventCompanies = await EventService.GetEventCompaniesAsync(eventId);  

                foreach (var attendee in eventIndividuals)
                {
                    var individual = await EventService.GetIndividualAsync(attendee.IndividualID);  
                    if (individual != null)
                    {
                        attendee.Individual = individual;
                    }
                }

                foreach (var attendee in eventCompanies)
                {
                    var company = await EventService.GetCompanyAsync(attendee.CompanyID);  
                    if (company != null)
                    {
                        attendee.Company = company;
                    }
                }
            }
            catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
            {
                Console.WriteLine($"Event with ID {eventId} not found.");
            }
        }
    }
    private string message;

    private async Task DeleteIndividualAttendee(EventIndividual attendee)
    {
   
            await EventService.DeleteIndividualAttendeeAsync(attendee.EventID, attendee.IndividualID);

            eventIndividuals.Remove(attendee);
            message = "The individual attendee was successfully deleted.";

            StateHasChanged();
        
    }


    private async Task DeleteCompanyAttendee(EventCompany attendee)
    {
        
        await EventService.DeleteCompanyAttendeeAsync(attendee.EventID, attendee.CompanyID); 

        eventCompanies.Remove(attendee);
        message = "The company attendee was successfully deleted.";

        StateHasChanged();
    }




    private async Task RefreshPage()
    {
        await OnInitializedAsync();
    }

    private void GoToDetails(EventIndividual attendee)
    {
        NavigationManager.NavigateTo($"{Configuration["Urls:IndividualDetails"]}/{attendee.IndividualID}");
    }

    private void GoToDetails(EventCompany attendee)
    {
        NavigationManager.NavigateTo($"{Configuration["Urls:CompanyDetails"]}/{attendee.CompanyID}");
    }

}
