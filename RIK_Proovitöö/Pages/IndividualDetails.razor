@page "/IndividualDetails/{Id}"
@inject NavigationManager NavigationManager
@using RIK_Proovitöö.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.Net
@using RIK_Proovitöö.Services
@using RIK_Proovitöö.Components.EventDetailsComponents
@inject IIndividualService IndividualService
@using RIK_Proovitöö.Components.DetailsBanner
@using static System.Net.WebRequestMethods

<Banner/>

@if (EditableIndividual == null)
{
    <p>Loading...</p>
}
else
{
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-12 col-md-8 col-lg-6">
                <EditForm Model="EditableIndividual" OnSubmit="HandleSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <h4 style="color:deepskyblue">Osavõtja info</h4>
                    <div class="form-group row mb-3">
                        <label for="firstName" class="col-sm-4 col-form-label">Eesnimi:</label>
                        <div class="col-sm-8">
                            <InputText class="form-control border" id="firstName" @bind-Value="EditableIndividual.FirstName" />
                        </div>
                    </div>
                    <div class="form-group row mb-3">
                        <label for="lastName" class="col-sm-4 col-form-label">Perenimi:</label>
                        <div class="col-sm-8">
                            <InputText class="form-control border" id="lastName" @bind-Value="EditableIndividual.LastName" />
                        </div>
                    </div>
                    <div class="form-group row mb-3">
                        <label for="personalCode" class="col-sm-4 col-form-label">Isikukood:</label>
                        <div class="col-sm-8">
                            <InputNumber class="form-control border" id="personalCode" @bind-Value="EditableIndividual.PersonalCode" />
                        </div>
                    </div>
                    <div class="form-group row mb-3">
                        <label for="paymentType" class="col-sm-4 col-form-label">Makseviis:</label>
                        <div class="col-sm-8">
                            <InputSelect class="form-control border" id="paymentType" @bind-Value="EditableIndividual.PaymentType">
                                <option value="BankTransfer">Bank Transfer</option>
                                <option value="Cash">Cash</option>
                            </InputSelect>
                        </div>
                    </div>
                    <div class="form-group row mb-3">
                        <label for="extraInfo" class="col-sm-4 col-form-label">Lisainfo:</label>
                        <div class="col-sm-8">
                            <InputTextArea class="form-control border" id="extraInfo" @bind-Value="EditableIndividual.ExtraInfo" rows="3" />
                        </div>
                    </div>

                    <button type="button" class="btn btn-secondary" @onclick="HandleReturn">Tagasi</button>
                    <button type="submit" class="btn btn-primary">Salvesta</button>
                </EditForm>
            </div>
        </div>
    </div>
}


@code {
    [Parameter]
    public string? Id { get; set; }

    public Individual? Individual { get; set; }
    private Individual? EditableIndividual { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id != null && int.TryParse(Id, out var individualId))
        {
            Individual = await IndividualService.GetIndividualAsync(individualId);  
            if (Individual != null)
            {
                EditableIndividual = new Individual
                    {
                        ID = Individual.ID,
                        FirstName = Individual.FirstName,
                        LastName = Individual.LastName,
                        PersonalCode = Individual.PersonalCode,
                        PaymentType = Individual.PaymentType,
                        ExtraInfo = Individual.ExtraInfo
                    };
            }
        }
    }

    protected async Task HandleSubmit()
    {
        if (Id != null && EditableIndividual != null)
        {
            Individual = EditableIndividual;
            Individual.ID = int.Parse(Id);
            await IndividualService.UpdateIndividualAsync(Individual.ID, Individual);  
        }
    }

    private void HandleReturn()
    {
        NavigationManager.NavigateTo("/");
    }
}